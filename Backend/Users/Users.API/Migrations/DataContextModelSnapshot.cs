// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Users.DAL.Context;

#nullable disable

namespace Users.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Users.DAL.Models.BaseUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OriginalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UniversityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("BaseUsers");
                });

            modelBuilder.Entity("Users.DAL.Models.EntryRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BaseUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SentByUniversity")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UniversityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BaseUserId");

                    b.HasIndex("UniversityId");

                    b.ToTable("EntryRequests");
                });

            modelBuilder.Entity("Users.DAL.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BaseUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BaseUserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Users.DAL.Models.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BaseUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BaseUserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Users.DAL.Models.University", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("DirectorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId")
                        .IsUnique();

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("Users.DAL.Models.BaseUser", b =>
                {
                    b.HasOne("Users.DAL.Models.University", "UniversityMember")
                        .WithMany("Members")
                        .HasForeignKey("UniversityId");

                    b.OwnsOne("Users.DAL.Models.Address", "Address", b1 =>
                        {
                            b1.Property<long>("BaseUserId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.HasKey("BaseUserId");

                            b1.ToTable("BaseUsers");

                            b1.WithOwner()
                                .HasForeignKey("BaseUserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("UniversityMember");
                });

            modelBuilder.Entity("Users.DAL.Models.EntryRequest", b =>
                {
                    b.HasOne("Users.DAL.Models.BaseUser", "BaseUser")
                        .WithMany("EntryRequests")
                        .HasForeignKey("BaseUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users.DAL.Models.University", "University")
                        .WithMany("EntryRequests")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseUser");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Users.DAL.Models.Student", b =>
                {
                    b.HasOne("Users.DAL.Models.BaseUser", "BaseUser")
                        .WithOne("Student")
                        .HasForeignKey("Users.DAL.Models.Student", "BaseUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseUser");
                });

            modelBuilder.Entity("Users.DAL.Models.Teacher", b =>
                {
                    b.HasOne("Users.DAL.Models.BaseUser", "BaseUser")
                        .WithOne("Teacher")
                        .HasForeignKey("Users.DAL.Models.Teacher", "BaseUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseUser");
                });

            modelBuilder.Entity("Users.DAL.Models.University", b =>
                {
                    b.HasOne("Users.DAL.Models.BaseUser", "Director")
                        .WithOne("UniversityDirector")
                        .HasForeignKey("Users.DAL.Models.University", "DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Users.DAL.Models.Address", "Address", b1 =>
                        {
                            b1.Property<long>("UniversityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.HasKey("UniversityId");

                            b1.ToTable("Universities");

                            b1.WithOwner()
                                .HasForeignKey("UniversityId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Users.DAL.Models.BaseUser", b =>
                {
                    b.Navigation("EntryRequests");

                    b.Navigation("Student");

                    b.Navigation("Teacher");

                    b.Navigation("UniversityDirector");
                });

            modelBuilder.Entity("Users.DAL.Models.University", b =>
                {
                    b.Navigation("EntryRequests");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
